###############################################################################
# @file Kbuild.linux
#
# @brief Kbuild for compiling linux drivers
#
# @author Yury GEORGIEVSKIY. CERN AB/CO
#
# @date Created on 08/04/2009
#
# @note For developers @e only. To work && test git branches - use .__kitchen
#       directory with your username inside.
#
# @example Let's say you want to work on your own CDCM branch. What should be
#          done is:
#          1. -> cd .__kitchen/<usrname>
#          2. -> git-clone ../../cdcm
#          3. Do modifications in the cloned CDCM
#             (i.e. in __kitchen/<usrname>/cdcm)
#          4. Check if your driver is still working with it.
#             To do this - cd to the driver dir.
#             4.1. -> cd coht/nulldrvr/driver
#             4.2 compile with local CDCM. Example:
#                 make clean drvr CPU=L865 \
#                 CDCM_DRVR_DIR=/acc/src/dsc/drivers/coht/.__kitchen/ygeorgie \
#                 CDCM_D=../../.__kitchen/ygeorgie/cdcm
#          5. Commit changes in the main CDCM branch:
#             -> git-commit
###############################################################################

# Include specific Makefile to get driver configuraion
include $(M)/../Makefile.specific

# Include generic definitions
include $(M)/../../makefiles/Kbuild.include

CDCM_D = ../../cdcm/$(CPU)/$(KVER)
UTIL_D = ../../utils/driver/$(CPU)/$(KVER)

# Extra CC flags && needed pathes
ccflags-y += \
	-I$(M) \
	-I$(TOPDIR) \
	-I$(M)/../include \
	-I$(TOPDIR)/skel/driver \
	-I$(TOPDIR)/utils/driver \
	\
	-DDRIVER_NAME=\"$(DRIVER_NAME)\" \
	-DCPU=$(CPU) \
	-DCOMPILE_TIME=$(shell date --utc +%s)

# What we need to build
obj-m := $(DRIVER_NAME).o

# Virgin driver (without any extra features) consists of _all_  '*.c'
# files in './driver' directory
$(DRIVER_NAME)-y := $(OBJFILES)

# If driver is 'skel' compliant?
ifeq ($(IS_SKEL),y)

# 'skel' hosting dir
SKEL_D = $(obj)/../../skel/driver

# Get all *.c files from there
SKELSRCF = $(wildcard $(SKEL_D)/*.c)

# Kill all ',backup' files
FLTSKELFILES = $(filter-out $(SKEL_D)/$(comma)%, $(filter $(addprefix %, $(SRCSFXS)),$(SKELSRCF)))

# Final list of 'skel' *.c files
skel = $(addsuffix $(SRCSFXS),$(notdir $(basename $(FLTSKELFILES))))

# Took examples from xtensa/boot/lib
# Copy all 'skel' *.c files into local dir for compilation
quiet_cmd_copy_skel = COPY    $@
      cmd_copy_skel = cat $< > $@

# Remove already compiled 'skel' *.c files from local dir
quiet_cmd_remove_skel = RM    $<
      cmd_remove_skel = rm -f $<

# We copy 'skel' *.c files locally for compilation
# Check 'Static Pattern Rules' in makefile manual
$(addprefix $(obj)/,$(skel)):  $(obj)/%: $(SKEL_D)/%
	$(call cmd,copy_skel)

# Add extra files to the list (including XML, as 'skel' is using it)
$(DRIVER_NAME)-y += $(skel:.c=.o) $(addprefix $(UTIL_D)/, libinstkernel.o)

# Should redefine .o compilation rule as skel *.c
# files should be removed after compilation
$(addprefix $(obj)/,$(skel:.c=.o)): %.o: %.c
	$(call cmd,cc_o_c)
	@rm -f $(depfile)
	$(call cmd,remove_skel)

# 'skel' is CDCM compliant with VME && PCI bus support
IS_CDCM        = y
CONFIG_BUS_PCI = y
CONFIG_BUS_VME = y
endif # IS_SKEL


# CDCM driver types
# This is VME
ifeq ($(CONFIG_BUS_VME),y)

# 'vmebridge' hosting dir
VMEB_D = $(obj)/../../vmebridge/driver

cdcmvme-$(CONFIG_BUS_VME) += cdcmVme.o

quiet_cmd_copy_symvers = COPY    $@
      cmd_copy_symvers = cat $< > $@

# We need to copy 'vmebus' Module.symvers file locally to get
# rid of compilation warnings.

# $(extra-y) and $(targets) is _not_ working here
always += Module.symvers

# We need to copy .symvers file locally
$(obj)/Module.symvers: $(VMEB_D)/Module.symvers
	$(call cmd,copy_symvers)
endif # CONFIG_BUS_VME

# This is PCI
cdcmpci-$(CONFIG_BUS_PCI) += cdcmPci.o cdcmPciDmaLinux.o

# CDCM backbone
cdcm-$(IS_CDCM) := $(addprefix $(CDCM_D)/, \
		   cdcmBoth.o cdcmDrvr.o cdcmLynxAPI.o \
		   cdcmMem.o cdcmThread.o cdcmTime.o \
		   $(cdcmvme-y) $(cdcmpci-y))

# Extra driver utilities
xml-$(USE_XML)         := libinstkernel.o
plx9030-$(USE_PLX9030) := plx9030.o
plx9656-$(USE_PLX9636) := plx9656.o

# Major driver Utilities
utils-$(USE_UTILS) := $(addprefix $(UTIL_D)/, \
	drvr_load_file.o drvr_utils.o $(xml-y) $(plx9030-y) $(plx9656-y))

# Build-up final version with extra things for the driver
$(DRIVER_NAME)-y += $(cdcm-y) $(utils-y)