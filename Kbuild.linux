###############################################################################
# @file Kbuild.linux
#
# @brief General kbuild for compiling linux drivers
#
# @author Yury GEORGIEVSKIY. CERN AB/CO
#
# @date Created on 13/01/2009
#
# @note For developers @e only. To work && test git branches - use .__kitchen
#       directory with your username inside.
#
# @example Let's say you want to work on your own CDCM branch. What should be
#          done is:
#          1. -> cd .__kitchen/<usrname>
#          2. -> git-clone ../../cdcm
#          3. Do modifications in the cloned CDCM
#             (i.e. in __kitchen/<usrname>/cdcm)
#          4. Check if your driver is still working with it.
#             To do this - cd to the driver dir.
#             4.1. -> cd coht/nulldrvr/driver
#             4.2 compile with local CDCM. Example:
#                 make clean drvr CPU=L865 \
#                 CDCM_DRVR_DIR=/acc/src/dsc/drivers/coht/.__kitchen/ygeorgie \
#                 CDCM_D=../../.__kitchen/ygeorgie/cdcm
#          5. Commit changes in the main CDCM branch:
#             -> git-commit
###############################################################################

include $(M)/../Makefile.specific

# Should be relative to the $(M) path, i.e. cwd
# I didn't use CDCM_DRVR_DIR in XML_LIB_D because the former can be redefined
# to be able to work with test CDCM versions.

CDCM_DRVR_DIR = /acc/src/dsc/drivers/coht
XML_LIB_D     = /acc/src/dsc/drivers/coht/utils/xml
XML_D         = ../../utils/xml
CDCM_D        = ../../cdcm
SKEL_D        = ../../skel/driver
UTILS_D       = ../../utils/drvr

VPATH += /acc/src/dsc/drivers/coht/cdcm

# Files, should be compiled with every driver
# CDCM is always using libinst.
CDCM_SRC_FILES += \
	$(UTILS_D)/drvr_load_file.c \
	$(UTILS_D)/drvr_utils.c \
	\
	$(CDCM_D)/cdcmBoth.c \
        $(CDCM_D)/cdcmDrvr.c \
	$(CDCM_D)/cdcmLynxAPI.c \
	$(CDCM_D)/cdcmMem.c \
        $(CDCM_D)/cdcmThread.c \
        $(CDCM_D)/cdcmTime.c \
	\
	$(XML_D)/libinstkernel.c


# Driver type (PCI, VME or BOTH) -- BOTH (which is the default)
# means that both Pci and Vme CDCM files will be compiled
ifeq ($(DRIVER_BUS), PCI)
CDCM_SRC_FILES += $(CDCM_D)/cdcmPci.c \
	$(CDCM_D)/cdcmPciDmaLinux.c
else ifeq ($(DRIVER_BUS), VME)
CDCM_SRC_FILES += $(CDCM_D)/cdcmVme.c
else
CDCM_SRC_FILES += $(CDCM_D)/cdcmPci.c \
	$(CDCM_D)/cdcmVme.c \
	$(CDCM_D)/cdcmPciDmaLinux.c
endif


SKEL_SRC_FILES += \
	$(SKEL_D)/skeldrvr.c

ifeq ($(IS_SKEL), n)
ifeq ($(IS_CDCM), y)
EXTRA_DRVR_OBJS = $(addsuffix .o, $(basename $(CDCM_SRC_FILES))) $(addsuffix .o, $(basename $(EXTRA_SRC_FILES)))
else
EXTRA_DRVR_OBJS = $(addsuffix .o, $(basename $(EXTRA_SRC_FILES)))
endif
else ifeq ($(IS_SKEL), y)
EXTRA_DRVR_OBJS = $(addsuffix .o, $(basename $(CDCM_SRC_FILES))) $(addsuffix .o, $(basename $(SKEL_SRC_FILES))) $(addsuffix .o, $(basename $(EXTRA_SRC_FILES)))
else
$(error IS_SKEL is not defined!)
endif

# Filter out driver objects
comma = ,
EXTOBJ	= .o
SRCSFXS = .c
DRVRSRCFILES = $(wildcard $(M)/*Drvr.c)
FLTSRCFILES = $(filter-out $(M)/$(comma)%, $(filter $(addprefix %, $(SRCSFXS)),$(DRVRSRCFILES)))
OBJFILES = $(addsuffix $(EXTOBJ),$(notdir $(basename $(FLTSRCFILES))))
DRVROBJS = $(filter $(addprefix %Drvr, $(EXTOBJ)), $(OBJFILES))

# '-Wno-strict-prototypes' is used to get rid of warning
# 'function declaration isn't a prototype'

obj-m     := $(DRIVER_NAME).o
ccflags-y := -Wno-strict-prototypes $(LINUXINCLUDE) -I$(M) -I$(M)/../include -I$(M)/../../include -I$(CDCM_DRVR_DIR) -I$(M)/$(SKEL_D) -I$(XML_LIB_D) $(EXTRA_INCDIRS) -DDRIVER_NAME=\"$(DRIVER_NAME)\" -DCPU=$(CPU) -DCOMPILE_TIME=$(shell date --utc +%s)
#$(DRIVER_NAME)-objs := $(DRVROBJS) $(EXTRA_DRVR_OBJS)
$(DRIVER_NAME)-y := $(DRVROBJS) $(EXTRA_DRVR_OBJS)